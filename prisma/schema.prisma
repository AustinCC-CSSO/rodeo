datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

model User {
  id                    Int                 @id @default(autoincrement())
  email                 String              @unique
  magicLink             String              @unique
  role                  Role                @default(HACKER)
  status                Status              @default(CREATED)
  decision              Decision?
  fullName              String?
  preferredName         String?
  gender                Gender?
  race                  Race[]
  pronouns              String?
  photoReleaseAgreed    Boolean             @default(false)
  liabilityWaiverAgreed Boolean             @default(false)
  codeOfConductAgreed   Boolean             @default(false)
  major                 String?
  classification        Classification?
  graduation            Graduation?
  firstGeneration       Boolean?
  international         Boolean?
  hackathonsAttended    Int?
  workshops             String[]
  referrer              String?
  excitedAbout          String?
  resume                String?
  github                String?
  linkedin              String?
  website               String?
  lunch                 Boolean             @default(false)
  dietaryRestrictions   DietaryRestriction?
  allergies             String?
  accommodations        String?
  other                 String?
}

model Announcement {
  id        Int      @id @default(autoincrement())
  body      String
  published DateTime @default(now())
}

// Store unreleased decisions in their own table
model Decision {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  status Status
}

// Store settings in a table with a single row
model Settings {
  id                Int     @id @default(autoincrement()) // Dummy ID is to satisfy Prisma
  // TODO: Separate public and private settings into separate tables
  // PUBLIC SETTINGS (all users must be able to see these)
  applicationOpen   Boolean @default(true)
  // PRIVATE SETTINGS (settings that non-admins do not need)
  rollingAdmissions Boolean @default(false)
}

enum Role {
  HACKER
  ADMIN
}

enum Status {
  CREATED // User has entered email but has not opened their magic link
  VERIFIED // User has opened magic link
  APPLIED // User has finished application
  ACCEPTED // User has been accepted but has not yet confirmed
  REJECTED // User has been rejected
  WAITLISTED // User has been waitlisted
  CONFIRMED // User has confirmed their attendance
  DECLINED // User has declined their attendance
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  OTHER
  REFUSE
}

enum Race {
  AMERICAN_INDIAN
  ASIAN
  BLACK
  HISPANIC
  NATIVE_HAWAIIAN
  WHITE
  MULTIPLE
  OTHER
  REFUSE
}

enum Classification {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
  MASTERS
  DOCTORATE
}

enum Graduation {
  S2023
  F2023
  S2024
  F2024
  S2025
  F2025
  S2026
  OTHER
}

enum DietaryRestriction {
  NONE
  NO_PORK
  VEGETARIAN
  VEGAN
}
